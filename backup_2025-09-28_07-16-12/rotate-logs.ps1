#!/usr/bin/env pwsh

# Script de rotation des logs pour le projet Portfolio Alegria
# Auteur: NeckTeck
# Date: $(Get-Date -Format "yyyy-MM-dd")

param(
    [string]$LogPath = ".\log.txt",
    [int]$MaxSizeMB = 5,
    [int]$MaxArchives = 5
)

# Configuration
$MaxSizeBytes = $MaxSizeMB * 1MB
$ArchiveDir = ".\logs"

Write-Host "üîÑ Rotation des logs d√©marr√©e..." -ForegroundColor Cyan

# Cr√©er le dossier d'archives si n√©cessaire
if (-not (Test-Path $ArchiveDir)) {
    New-Item -ItemType Directory -Path $ArchiveDir -Force | Out-Null
    Write-Host "üìÅ Dossier d'archives cr√©√©: $ArchiveDir" -ForegroundColor Green
}

# V√©rifier si le fichier de log existe
if (-not (Test-Path $LogPath)) {
    Write-Host "‚ö†Ô∏è  Fichier de log non trouv√©: $LogPath" -ForegroundColor Yellow
    exit 0
}

# Obtenir la taille du fichier
$fileInfo = Get-Item $LogPath
$fileSize = $fileInfo.Length

Write-Host "üìä Taille actuelle du log: $([math]::Round($fileSize / 1MB, 2)) MB" -ForegroundColor Blue

# V√©rifier si la rotation est n√©cessaire
if ($fileSize -lt $MaxSizeBytes) {
    Write-Host "‚úÖ Taille du log acceptable, pas de rotation n√©cessaire" -ForegroundColor Green
    exit 0
}

Write-Host "üîÑ Rotation n√©cessaire..." -ForegroundColor Yellow

# Cr√©er le nom du fichier d'archive
$timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
$archiveName = "log_$timestamp.txt"
$archivePath = Join-Path $ArchiveDir $archiveName

# Archiver le fichier actuel
try {
    Copy-Item $LogPath $archivePath -Force
    Write-Host "üì¶ Log archiv√© vers: $archivePath" -ForegroundColor Green
    
    # Vider le fichier de log actuel
    Clear-Content $LogPath
    Write-Host "üßπ Fichier de log actuel vid√©" -ForegroundColor Green
    
    # Ajouter une entr√©e de rotation
    $rotationEntry = "=== ROTATION DES LOGS ===`nDate: $(Get-Date)`nFichier archiv√©: $archiveName`nTaille avant rotation: $([math]::Round($fileSize / 1MB, 2)) MB`n========================`n"
    Add-Content $LogPath $rotationEntry
    
    Write-Host "‚úÖ Rotation termin√©e avec succ√®s" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erreur lors de la rotation: $_" -ForegroundColor Red
    exit 1
}

# Nettoyer les anciennes archives
$archives = Get-ChildItem -Path $ArchiveDir -Filter "log_*.txt" | Sort-Object LastWriteTime -Descending
if ($archives.Count -gt $MaxArchives) {
    Write-Host "üßπ Nettoyage des anciennes archives..." -ForegroundColor Yellow
    $archivesToDelete = $archives | Select-Object -Skip $MaxArchives
    foreach ($archive in $archivesToDelete) {
        Remove-Item $archive.FullName -Force
        Write-Host "üóëÔ∏è  Archive supprim√©e: $($archive.Name)" -ForegroundColor Red
    }
}

Write-Host "üéâ Rotation des logs termin√©e !" -ForegroundColor Green
