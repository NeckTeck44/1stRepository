// Theme Manager - Gestion centralis√©e du th√®me
console.log('üé® Theme Manager charg√©');

/**
 * Classe de gestion du th√®me
 */
class ThemeManager {
  constructor() {
    this.currentTheme = null;
    this.systemTheme = null;
    this.themeToggle = null;
    this.isInitialized = false;
    this.autoDetectEnabled = ConfigUtils.get('theme.autoDetect') !== false;
    this.defaultTheme = ConfigUtils.get('theme.default') || 'light';
    this.transitionDuration = ConfigUtils.get('theme.transitionDuration') || 300;
    this.localStorageKey = ConfigUtils.get('theme.localStorageKey') || 'portfolio-theme';
    
    this.init();
  }

  /**
   * Initialise le gestionnaire de th√®me
   */
  init() {
    if (this.isInitialized) return;
    
    try {
      // Attendre que le DOM soit charg√©
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => this.setupTheme());
      } else {
        this.setupTheme();
      }
      
      this.isInitialized = true;
      console.log('‚úÖ Theme Manager initialis√©');
      
    } catch (error) {
      console.error('‚ùå Erreur lors de l\'initialisation du Theme Manager:', error);
    }
  }

  /**
   * Configure le th√®me
   */
  setupTheme() {
    try {
      // R√©cup√©rer les √©l√©ments DOM
      this.themeToggle = document.querySelector(Selectors.theme.toggle);
      
      // D√©tecter le th√®me syst√®me
      this.detectSystemTheme();
      
      // Appliquer le th√®me initial
      this.applyInitialTheme();
      
      // Configurer les √©v√©nements
      this.setupEventListeners();
      
      // Observer les changements de th√®me syst√®me
      if (this.autoDetectEnabled) {
        this.setupSystemThemeObserver();
      }
      
      console.log('‚úÖ Th√®me configur√© avec succ√®s');
      console.log(`üé® Th√®me actuel: ${this.currentTheme}`);
      console.log(`üñ•Ô∏è  Th√®me syst√®me: ${this.systemTheme}`);
      console.log(`üîß Auto-d√©tection: ${this.autoDetectEnabled ? 'activ√©e' : 'd√©sactiv√©e'}`);
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la configuration du th√®me:', error);
    }
  }

  /**
   * D√©tecte le th√®me syst√®me
   */
  detectSystemTheme() {
    if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
      this.systemTheme = 'dark';
    } else {
      this.systemTheme = 'light';
    }
  }

  /**
   * Applique le th√®me initial
   */
  applyInitialTheme() {
    // R√©cup√©rer le th√®me sauvegard√©
    const savedTheme = this.getSavedTheme();
    
    // D√©terminer le th√®me √† appliquer
    let themeToApply;
    
    if (savedTheme) {
      themeToApply = savedTheme;
    } else if (this.autoDetectEnabled) {
      themeToApply = this.systemTheme;
    } else {
      themeToApply = this.defaultTheme;
    }
    
    // Appliquer le th√®me
    this.setTheme(themeToApply, false);
  }

  /**
   * R√©cup√®re le th√®me sauvegard√© dans le localStorage
   */
  getSavedTheme() {
    try {
      return localStorage.getItem(this.localStorageKey);
    } catch (error) {
      console.warn('‚ö†Ô∏è Impossible d\'acc√©der au localStorage:', error);
      return null;
    }
  }

  /**
   * Sauvegarde le th√®me dans le localStorage
   */
  saveTheme(theme) {
    try {
      localStorage.setItem(this.localStorageKey, theme);
      console.log(`üíæ Th√®me sauvegard√©: ${theme}`);
    } catch (error) {
      console.warn('‚ö†Ô∏è Impossible de sauvegarder le th√®me:', error);
    }
  }

  /**
   * D√©finit le th√®me
   */
  setTheme(theme, save = true) {
    if (!theme || (theme !== 'light' && theme !== 'dark')) {
      console.warn('‚ö†Ô∏è Th√®me invalide:', theme);
      return;
    }
    
    const previousTheme = this.currentTheme;
    this.currentTheme = theme;
    
    // Appliquer les classes CSS
    this.applyThemeClasses(theme);
    
    // Mettre √† jour l'interface
    this.updateThemeToggle(theme);
    
    // Sauvegarder le th√®me
    if (save) {
      this.saveTheme(theme);
    }
    
    // D√©clencher les √©v√©nements
    this.dispatchThemeEvents(theme, previousTheme);
    
    // Mettre √† jour les propri√©t√©s CSS personnalis√©es
    this.updateCSSVariables(theme);
    
    console.log(`üé® Th√®me appliqu√©: ${theme}`);
  }

  /**
   * Applique les classes CSS pour le th√®me
   */
  applyThemeClasses(theme) {
    const htmlElement = document.documentElement;
    const bodyElement = document.body;
    
    // Supprimer les classes de th√®me existantes
    htmlElement.classList.remove(Classes.theme.light, Classes.theme.dark);
    bodyElement.classList.remove(Classes.theme.light, Classes.theme.dark);
    
    // Ajouter la classe du th√®me actuel
    const themeClass = Classes.theme[theme];
    if (themeClass) {
      htmlElement.classList.add(themeClass);
      bodyElement.classList.add(themeClass);
    }
    
    // Appliquer la transition
    this.applyThemeTransition();
  }

  /**
   * Applique la transition de th√®me
   */
  applyThemeTransition() {
    const style = document.createElement('style');
    style.textContent = `
      * {
        transition: background-color ${this.transitionDuration}ms ease,
                    color ${this.transitionDuration}ms ease,
                    border-color ${this.transitionDuration}ms ease,
                    box-shadow ${this.transitionDuration}ms ease !important;
      }
    `;
    
    document.head.appendChild(style);
    
    // Supprimer le style apr√®s la transition
    setTimeout(() => {
      document.head.removeChild(style);
    }, this.transitionDuration);
  }

  /**
   * Met √† jour le bouton de basculement de th√®me
   */
  updateThemeToggle(theme) {
    if (!this.themeToggle) return;
    
    const lightIcon = this.themeToggle.querySelector(Selectors.theme.lightIcon);
    const darkIcon = this.themeToggle.querySelector(Selectors.theme.darkIcon);
    
    if (lightIcon && darkIcon) {
      if (theme === 'light') {
        lightIcon.style.display = 'none';
        darkIcon.style.display = 'block';
      } else {
        lightIcon.style.display = 'block';
        darkIcon.style.display = 'none';
      }
    }
    
    // Mettre √† jour l'attribut aria-label
    this.themeToggle.setAttribute('aria-label', `Basculer vers le th√®me ${theme === 'light' ? 'sombre' : 'clair'}`);
  }

  /**
   * Met √† jour les propri√©t√©s CSS personnalis√©es
   */
  updateCSSVariables(theme) {
    const root = document.documentElement;
    
    // D√©finir les variables CSS en fonction du th√®me
    const themeVariables = {
      light: {
        '--bg-primary': '#ffffff',
        '--bg-secondary': '#f8f9fa',
        '--bg-tertiary': '#e9ecef',
        '--text-primary': '#212529',
        '--text-secondary': '#6c757d',
        '--text-tertiary': '#adb5bd',
        '--accent-primary': '#007bff',
        '--accent-secondary': '#0056b3',
        '--border-primary': '#dee2e6',
        '--border-secondary': '#ced4da',
        '--shadow-primary': 'rgba(0, 0, 0, 0.1)',
        '--shadow-secondary': 'rgba(0, 0, 0, 0.05)'
      },
      dark: {
        '--bg-primary': '#1a1a1a',
        '--bg-secondary': '#2d2d2d',
        '--bg-tertiary': '#404040',
        '--text-primary': '#ffffff',
        '--text-secondary': '#b0b0b0',
        '--text-tertiary': '#808080',
        '--accent-primary': '#4dabf7',
        '--accent-secondary': '#339af0',
        '--border-primary': '#404040',
        '--border-secondary': '#525252',
        '--shadow-primary': 'rgba(0, 0, 0, 0.3)',
        '--shadow-secondary': 'rgba(0, 0, 0, 0.2)'
      }
    };
    
    const variables = themeVariables[theme];
    if (variables) {
      Object.entries(variables).forEach(([property, value]) => {
        root.style.setProperty(property, value);
      });
    }
  }

  /**
   * Bascule le th√®me
   */
  toggleTheme() {
    const newTheme = this.currentTheme === 'light' ? 'dark' : 'light';
    this.setTheme(newTheme);
  }

  /**
   * Configure les √©couteurs d'√©v√©nements
   */
  setupEventListeners() {
    // √âcouteur pour le bouton de basculement
    if (this.themeToggle) {
      this.themeToggle.addEventListener('click', (e) => {
        e.preventDefault();
        this.toggleTheme();
      });
      
      console.log('üéõÔ∏è  √âcouteur de th√®me configur√©');
    } else {
      console.warn('‚ö†Ô∏è Bouton de th√®me non trouv√©');
    }
    
    // √âcouteur pour les raccourcis clavier
    document.addEventListener('keydown', (e) => {
      // Ctrl/Cmd + D pour basculer le th√®me
      if ((e.ctrlKey || e.metaKey) && e.key === 'd') {
        e.preventDefault();
        this.toggleTheme();
      }
    });
  }

  /**
   * Configure l'observateur de th√®me syst√®me
   */
  setupSystemThemeObserver() {
    if (!window.matchMedia) return;
    
    const darkModeQuery = window.matchMedia('(prefers-color-scheme: dark)');
    
    // √âcouteur pour les changements de th√®me syst√®me
    darkModeQuery.addEventListener('change', (e) => {
      this.systemTheme = e.matches ? 'dark' : 'light';
      
      // Appliquer le th√®me syst√®me seulement si aucun th√®me n'est manuellement s√©lectionn√©
      const savedTheme = this.getSavedTheme();
      if (!savedTheme) {
        this.setTheme(this.systemTheme, false);
        console.log(`üñ•Ô∏è  Th√®me syst√®me chang√©: ${this.systemTheme}`);
      }
    });
    
    console.log('üëÅÔ∏è  Observateur de th√®me syst√®me configur√©');
  }

  /**
   * D√©clenche les √©v√©nements de th√®me
   */
  dispatchThemeEvents(newTheme, previousTheme) {
    // √âv√©nement g√©n√©ral de changement de th√®me
    const themeChangedEvent = new CustomEvent(Events.theme.changed, {
      detail: {
        newTheme,
        previousTheme,
        timestamp: Date.now()
      }
    });
    document.dispatchEvent(themeChangedEvent);
    
    // √âv√©nements sp√©cifiques au th√®me
    const themeSpecificEvent = new CustomEvent(
      newTheme === 'light' ? Events.theme.lightMode : Events.theme.darkMode,
      {
        detail: {
          theme: newTheme,
          timestamp: Date.now()
        }
      }
    );
    document.dispatchEvent(themeSpecificEvent);
    
    console.log(`üì° √âv√©nement de th√®me d√©clench√©: ${Events.theme.changed}`);
  }

  /**
   * R√©initialise le th√®me par d√©faut
   */
  resetTheme() {
    localStorage.removeItem(this.localStorageKey);
    this.applyInitialTheme();
    console.log('üîÑ Th√®me r√©initialis√©');
  }

  /**
   * Active ou d√©sactive l'auto-d√©tection
   */
  setAutoDetect(enabled) {
    this.autoDetectEnabled = enabled;
    
    if (enabled) {
      this.setupSystemThemeObserver();
      
      // Appliquer le th√®me syst√®me si aucun th√®me n'est sauvegard√©
      const savedTheme = this.getSavedTheme();
      if (!savedTheme) {
        this.setTheme(this.systemTheme, false);
      }
    }
    
    console.log(`üîß Auto-d√©tection ${enabled ? 'activ√©e' : 'd√©sactiv√©e'}`);
  }

  /**
   * Obtient le th√®me actuel
   */
  getCurrentTheme() {
    return this.currentTheme;
  }

  /**
   * Obtient le th√®me syst√®me
   */
  getSystemTheme() {
    return this.systemTheme;
  }

  /**
   * V√©rifie si le th√®me sombre est actif
   */
  isDarkMode() {
    return this.currentTheme === 'dark';
  }

  /**
   * V√©rifie si le th√®me clair est actif
   */
  isLightMode() {
    return this.currentTheme === 'light';
  }

  /**
   * Obtient les informations de th√®me
   */
  getThemeInfo() {
    return {
      current: this.currentTheme,
      system: this.systemTheme,
      autoDetect: this.autoDetectEnabled,
      saved: this.getSavedTheme(),
      default: this.defaultTheme
    };
  }
}

// Cr√©er une instance globale
let themeManager;

// Initialiser le gestionnaire de th√®me quand le DOM est pr√™t
document.addEventListener('DOMContentLoaded', () => {
  themeManager = new ThemeManager();
  window.themeManager = themeManager;
});

// Exporter les fonctions globales pour la compatibilit√©
window.toggleTheme = () => themeManager?.toggleTheme();
window.setTheme = (theme) => themeManager?.setTheme(theme);
window.getTheme = () => themeManager?.getCurrentTheme();
window.resetTheme = () => themeManager?.resetTheme();
window.setAutoDetect = (enabled) => themeManager?.setAutoDetect(enabled);
window.isDarkMode = () => themeManager?.isDarkMode();
window.isLightMode = () => themeManager?.isLightMode();
window.getThemeInfo = () => themeManager?.getThemeInfo();

// Exporter la classe pour une utilisation avanc√©e
window.ThemeManager = ThemeManager;

console.log('üé® Theme Manager pr√™t √† √™tre utilis√©');
